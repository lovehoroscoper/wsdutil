<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">
	<description>
		myssa 自己的认证
	</description>

	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， -->
	<bean id="ssaFilter" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<!-- 认证管理器，实现用户认证的入口 -->
		<property name="authenticationManager" ref="ssaAuthenticationManager" />
		<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
		<property name="accessDecisionManager" ref="ssaAccessDecisionManager" />
		<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
		<property name="securityMetadataSource" ref="ssaFilterInvocationSecurityMetadataSource" />
		<!-- 默认也是false -->
		<property name="observeOncePerRequest" value="false" />
	</bean>

	<!-- 认证管理器 这个与 cas的 userDetailsService重复了是否可以不再配置 
	ProviderManager	
	AbstractUserDetailsAuthenticationProvider 中会先从
	UserDetails user = this.userCache.getUserFromCache(username);
	        if (!cacheWasUsed) {
            this.userCache.putUserInCache(user);
        }
        所以不必担心重复查询
	-->
	<sec:authentication-manager alias="ssaAuthenticationManager">
		<!-- 认证管理器提供者 【user-service-ref】引用的服务组件，通过securityManager进行对用户信息的认证 -->
		<sec:authentication-provider user-service-ref="userDetailsService">
			<!-- 密码采用md5加密方式加密 -->
			<sec:password-encoder base64="false" ref="passwordEncoder">
				<!-- 用username做盐值加密，防止md5字典攻击 -->
				<sec:salt-source user-property="username" />
			</sec:password-encoder>
		</sec:authentication-provider>
	</sec:authentication-manager>

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<bean id="ssaAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="false" />
		<property name="decisionVoters">
			<list>
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</property>
	</bean>

	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<bean id="ssaFilterInvocationSecurityMetadataSource" class="org.gonetbar.ssa.cas.filter.sms.SsaFilterInvocationSecurityMetadataSource">
		<!-- 实例化需要的参数 -->
		<!-- URL匹配器UrlMatcher需要的参数 -->
		<!-- useAntPath 是否使用Apache Ant的匹配模式，即资源/userManager/** 和/userManager/UserManager_list.action匹配 -->
		<property name="useAntPath">
			<value>true</value>
		</property>
		<!-- lowercaseComparisons 是否在比较URL前将URL都转化成小写，即资源/userManager/** 和/UserManager/××匹配 -->
		<property name="lowercaseComparisons">
			<value>false</value>
		</property>
	</bean>

	<!-- 用户信息服务 -->
	<bean id="userDetailsService" class="org.gonetbar.ssa.service.impl.SsaUserDetailsServiceImpl"/>
	
	<!-- 密码加密 -->
	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />


</beans>