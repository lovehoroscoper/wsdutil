// NewFileTypeUI.java
// Gayathri Singh, April 2008, gayathri@byteblend.com

/* This class adds the registry keys needed to register a new file type, associated with an executable
   jar. When an instance of the specified file type is double clicked, the associated executable jar 
   will be run. 
   
   This class provides a GUI frontend for NewFileType class. It collects the information 
   graphically through a Swing UI, and invokes NewFileType.registerNewFileType() passing in 
   information needed to add a new file type with an associated application.
   
   Usage: 
     java -cp c:\jinvoke\jinvoke.jar;. jinvoke.win32demos.fileassociation.NewFileTypeUI
*/
package jinvoke.win32demos.fileassociation;

import com.jinvoke.win32.User32;
import java.io.File;
import javax.swing.filechooser.FileFilter;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.UIManager;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author  tsg
 */
public class NewFileTypeUI extends javax.swing.JFrame {
    
    NewFileType newFileType;
    
    /** Creates new form NewFileTypeUI */
    public NewFileTypeUI() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtIcon = new javax.swing.JTextField();
        MaskFormatter formatter;
        try {
            formatter = new MaskFormatter("AAA");
        } catch (Exception e)
        {
            formatter = new MaskFormatter();
            System.out.println(e.getStackTrace());
        }
        txtFileExt = new JFormattedTextField(formatter);
        btnBrowseIcon = new javax.swing.JButton();
        txtDescription = new javax.swing.JTextField();
        txtProgID = new javax.swing.JTextField();
        progIDLabel = new javax.swing.JLabel();
        fileExtLabel = new javax.swing.JLabel();
        fileDescLabel = new javax.swing.JLabel();
        iconLabel = new javax.swing.JLabel();
        jarPathLabel = new javax.swing.JLabel();
        txtJar = new javax.swing.JTextField();
        btnBrowseJar = new javax.swing.JButton();
        btnRegisterFileType = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("New File Type Demo");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Register New File Type"));

        txtIcon.setText("C:\\JInvokeWin32Demos\\mstsc.ico");

        txtFileExt.setText("foo");

        btnBrowseIcon.setText("...");
        btnBrowseIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseIconActionPerformed(evt);
            }
        });

        txtDescription.setText("My Foo File");

        txtProgID.setText("Win32Demos.FooApp.1");

        progIDLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        progIDLabel.setText("Enter Program Identifier:");

        fileExtLabel.setText("Enter file extension:");

        fileDescLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        fileDescLabel.setText("Enter File Description:");

        iconLabel.setText("Select an icon for the new file:");

        jarPathLabel.setText("Executable jar file to associate:");

        txtJar.setText("C:\\fileinfo.jar");

        btnBrowseJar.setText("...");
        btnBrowseJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseJarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progIDLabel)
                    .addComponent(fileExtLabel)
                    .addComponent(jarPathLabel)
                    .addComponent(fileDescLabel)
                    .addComponent(iconLabel))
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(txtDescription, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(txtJar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(txtFileExt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(txtProgID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnBrowseIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseJar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(progIDLabel)
                    .addComponent(txtProgID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFileExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileExtLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileDescLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iconLabel)
                    .addComponent(txtIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtJar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jarPathLabel)
                    .addComponent(btnBrowseJar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBrowseIcon, fileDescLabel, progIDLabel, txtDescription, txtFileExt, txtIcon, txtJar, txtProgID});

        btnRegisterFileType.setFont(new java.awt.Font("Dialog", 0, 11));
        btnRegisterFileType.setText("Register New File Type");
        btnRegisterFileType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterFileTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(302, Short.MAX_VALUE)
                .addComponent(btnRegisterFileType)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRegisterFileType)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseIconActionPerformed

        JFileChooser fileChooser = new JFileChooser(".");        
        fileChooser.addChoosableFileFilter(new IconFilter());
        fileChooser.setAcceptAllFileFilterUsed(false);
        int status = fileChooser.showOpenDialog(null);
        if (status == JFileChooser.APPROVE_OPTION) {
          File selectedFile = fileChooser.getSelectedFile();
          System.out.println(selectedFile.getParent());
          System.out.println(selectedFile.getName());
          txtIcon.setText(selectedFile.getPath());
        } else if (status == JFileChooser.CANCEL_OPTION) {
          System.out.println(JFileChooser.CANCEL_OPTION);
        }

}//GEN-LAST:event_btnBrowseIconActionPerformed

    private void btnRegisterFileTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterFileTypeActionPerformed
        // TODO add your handling code here:
        if (txtFileExt.getText().equals(""))
        {
            User32.MessageBox(0, "Please enter a file extension", "New File Type Registration Error", WIDTH);
            return;
        }
        if (txtProgID.getText().equals(""))
        {
            User32.MessageBox(0, "Please enter program ID", "New File Type Registration Error", WIDTH);
            return;
        }
        if (txtDescription.getText().equals(""))
        {
            User32.MessageBox(0, "Please enter a file description", "New File Type Registration Error", WIDTH);
            return;
        }
        if (txtIcon.getText().equals(""))
        {
            User32.MessageBox(0, "Please enter path to file icon", "New File Type Registration Error", WIDTH);
            return;
        }
        newFileType = new NewFileType();
        newFileType.registerNewFileType(txtFileExt.getText(), txtProgID.getText(), txtDescription.getText(), 
        		txtIcon.getText(), txtJar.getText());
    }//GEN-LAST:event_btnRegisterFileTypeActionPerformed

    private void btnBrowseJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseJarActionPerformed
        JFileChooser fileChooser = new JFileChooser(".");        
        fileChooser.addChoosableFileFilter(new JarFilter());
        fileChooser.setAcceptAllFileFilterUsed(false);
        int status = fileChooser.showOpenDialog(null);
        if (status == JFileChooser.APPROVE_OPTION) {
          File selectedFile = fileChooser.getSelectedFile();
          System.out.println(selectedFile.getParent());
          System.out.println(selectedFile.getName());
          txtJar.setText(selectedFile.getPath());
        } else if (status == JFileChooser.CANCEL_OPTION) {
          System.out.println(JFileChooser.CANCEL_OPTION);
        }
}//GEN-LAST:event_btnBrowseJarActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
         try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    
                NewFileTypeUI ui = new NewFileTypeUI(); 
                ui.setLocationRelativeTo(null);
                ui.setVisible(true);
                }
            });
         } catch (Exception ex) {
            System.out.println(ex.toString());
        } 
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseIcon;
    private javax.swing.JButton btnBrowseJar;
    private javax.swing.JButton btnRegisterFileType;
    private javax.swing.JLabel fileDescLabel;
    private javax.swing.JLabel fileExtLabel;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jarPathLabel;
    private javax.swing.JLabel progIDLabel;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JFormattedTextField txtFileExt;
    private javax.swing.JTextField txtIcon;
    private javax.swing.JTextField txtJar;
    private javax.swing.JTextField txtProgID;
    // End of variables declaration//GEN-END:variables
    
}


class IconFilter extends FileFilter {

    //Accept all ico files and directories.
    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }
        String extension = getExtension(f);
        if (extension != null) {
            if (extension.equals("ico")){
                    return true;
            } else {
                return false;
            }
        }
        return false;
    }

    //The description of this filter
    public String getDescription() {
        return "Ico files";
    }
    private String getExtension(File f) {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');

        if (i > 0 &&  i < s.length() - 1) {
            ext = s.substring(i+1).toLowerCase();
        }
        return ext;
    }

}
class JarFilter extends FileFilter {

    //Accept all ico files and directories.
    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }
        String extension = getExtension(f);
        if (extension != null) {
            if (extension.equals("jar")){
                    return true;
            } else {
                return false;
            }
        }
        return false;
    }

    //The description of this filter
    public String getDescription() {
        return "Executable Jar files";
    }
    private String getExtension(File f) {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');

        if (i > 0 &&  i < s.length() - 1) {
            ext = s.substring(i+1).toLowerCase();
        }
        return ext;
    }

}
