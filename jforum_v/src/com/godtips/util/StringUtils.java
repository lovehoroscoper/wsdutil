package com.godtips.util;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * 字符串工具类 *  * @company junbao.net * @author 王江 * @since 2011-03-30 * @version 1.0 */public class StringUtils extends org.apache.commons.lang.StringUtils {	/**	 * 转换编码	 * 	 * @param str	 * @param resEncoding	 *            源编码	 * @param newEncoding	 *            新编码	 * @return	 */	public static String reEncoding(String str, String resEncoding, String newEncoding) {		try {			str = new String(str.getBytes(resEncoding), newEncoding);			return str;		} catch (Exception e) {			return str;		}	}		/**	 * 返回字符串的ASCII码char数组	 * @param str	 * @return	 */	public static char[] strToAsc(String str){		char[] chars = str.toCharArray();		return chars;	}	/**	 * 中文乱码转换	 * 	 * @param str	 * @return	 */	public static String getChinese(String str) {		try {			str = new String(str.getBytes("ISO8859_1"), "GBK");			return str;		} catch (Exception e) {			return str;		}	}	/**	 * 获取字符串内的中文	 * 	 * @param str	 * @return	 */	public static String getChineseCode(String str) {		try {			StringBuilder bf = new StringBuilder();			char[] chars = str.toCharArray();			for (int i = 0; i < chars.length; i++) {				if (chars[i] > 127) {					bf.append(chars[i]);				}			}			return bf.toString();		} catch (Exception e) {			return "";		}	}	/**	 * 半角转全角	 * 	 * @param input	 * @return	 */	public static String toSBC(String input) {		char[] c = input.toCharArray();		for (int i = 0; i < c.length; i++) {			if (c[i] == 32) {				c[i] = (char) 12288;				continue;			}			if (c[i] < 127)				c[i] = (char) (c[i] + 65248);		}		return new String(c);	}	/**	 * 转半角	 * 	 * @param input	 * @return	 */	public static String toDBC(String input) {		char[] c = input.toCharArray();		for (int i = 0; i < c.length; i++) {			if (c[i] == 12288) {				c[i] = (char) 32;				continue;			}			if (c[i] > 65280 && c[i] < 65375)				c[i] = (char) (c[i] - 65248);		}		return new String(c);	}	/**	 * 判断是否为整数	 * 	 * @param str	 *            传入的字符串	 * @return 是整数返回true,否则返回false	 */	public static boolean isInteger(String str) {		if (isNotBlank(str)) {			Pattern pattern = Pattern.compile("^[-\\+]?[\\d]*$");			return pattern.matcher(str).matches();		}		return false;	}	/**	 * 判断是否为浮点数，包括double和float	 * 	 * @param str	 *            传入的字符串	 * @return 是浮点数返回true,否则返回false	 */	public static boolean isDouble(String str) {		if (isNotBlank(str)) {			Pattern pattern = Pattern.compile("^[-\\+]?[.\\d]*$");			return pattern.matcher(str).matches();		}		return false;	}	/**	 * 判断输入的字符串是否符合Email样式.	 * 	 * @param str	 *            传入的字符串	 * @return 是Email样式返回true,否则返回false	 */	public static boolean isEmail(String str) {		if (isNotBlank(str)) {			Pattern pattern = Pattern.compile("^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$");			return pattern.matcher(str).matches();		}		return false;	}	/**	 * 判断输入的字符串是否为纯汉字	 * 	 * @param str	 *            传入的字符窜	 * @return 如果是纯汉字返回true,否则返回false	 */	public static boolean isChinese(String str) {		if (isNotBlank(str)) {			Pattern pattern = Pattern.compile("[\u0391-\uFFE5]+$");			return pattern.matcher(str).matches();		}		return false;	}	/**	 * 判断是否为质数	 * 	 * @param x	 * @return	 */	public static boolean isPrime(int x) {		if (x <= 7) {			if (x == 2 || x == 3 || x == 5 || x == 7)				return true;		}		int c = 7;		if (x % 2 == 0)			return false;		if (x % 3 == 0)			return false;		if (x % 5 == 0)			return false;		int end = (int) Math.sqrt(x);		while (c <= end) {			if (x % c == 0) {				return false;			}			c += 4;			if (x % c == 0) {				return false;			}			c += 2;			if (x % c == 0) {				return false;			}			c += 4;			if (x % c == 0) {				return false;			}			c += 2;			if (x % c == 0) {				return false;			}			c += 4;			if (x % c == 0) {				return false;			}			c += 6;			if (x % c == 0) {				return false;			}			c += 2;			if (x % c == 0) {				return false;			}			c += 6;		}		return true;	}	/**	 * 判断是不是合法手机号码	 * 	 * @param mobile	 * @return	 */	public static boolean isMobile(String mobile) {		Pattern pattern = Pattern.compile("^1[0-9]{10}$");		return pattern.matcher(mobile).matches();	}	/**	 * 是否为座机 (010-66571346)	 * 	 * @param phone	 * @return	 */	public static boolean isPhone(String phone) {		Pattern pattern = Pattern.compile("^0[0-9]{2,3}[-|－][0-9]{7,8}([-|－][0-9]{1,4})?$");		return pattern.matcher(phone).matches();	}	/**	 * 是否为邮编	 * 	 * @param phone	 * @return	 */	public static boolean isPost(String post) {		Pattern pattern = Pattern.compile("^[0-9]{6}$");		return pattern.matcher(post).matches();	}	/**	 * 是否为日期格式：yyyy-MM-dd	 * 	 * @param date	 * @return	 */	public static boolean isDate(String dateStr) {		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");		Date date = null;		try {			date = df.parse(dateStr);		} catch (ParseException e) {			return false;		}		return date != null;	}	/**	 * 是否为日期时间格式：yyyy-MM-dd hh:mm:ss or yyyy-MM-dd hh:mm	 * 	 * @param dateTime	 * @return	 */	public static boolean isDateTime(String dateTime) {		int first = dateTime.indexOf(":");		int last = dateTime.lastIndexOf(":");		if (first == -1) {			return false;		}		SimpleDateFormat df = null;		if (first == last) {			df = new SimpleDateFormat("yyyy-MM-dd hh:mm");		} else {			df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");		}		Date date = null;		try {			date = df.parse(dateTime);		} catch (ParseException e) {			return false;		}		return date == null;	}	/**	 * 字符串是否为正确的时间: 需要转换	 * 	 * @param dateTime	 * @return	 */	public static boolean checkDateTime(String dateTime) {		if (isNotEmpty(dateTime) && isInteger(dateTime)) {			SimpleDateFormat df = null;			if (dateTime.length() == 8) {				dateTime = dateTime.substring(0, 4) + "-" + dateTime.substring(4, 6) + "-" + dateTime.substring(6, 8);				df = new SimpleDateFormat("yyyy-MM-dd");				df.setLenient(false);			}			if (dateTime.length() == 12) {				dateTime = dateTime.substring(0, 4) + "-" + dateTime.substring(4, 6) + "-" + dateTime.substring(6, 8) + " " + dateTime.substring(8, 10) + ":" + dateTime.substring(10, 12);				df = new SimpleDateFormat("yyyy-MM-dd HH:mm");				df.setLenient(false);			}			if (dateTime.length() == 14) {				dateTime = dateTime.substring(0, 4) + "-" + dateTime.substring(4, 6) + "-" + dateTime.substring(6, 8) + " " + dateTime.substring(8, 10) + ":" + dateTime.substring(10, 12) + ":" + dateTime.substring(12, 14);				df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");				df.setLenient(false);			}			try {				Date date = df.parse(dateTime);				return true;			} catch (ParseException e) {				return false;			}		}		return false;	}	/**	 * 是否为url	 * 	 * @param url	 * @return	 */	public static boolean isURL(String url) {		Pattern pattern = Pattern				.compile("^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$");		return pattern.matcher(url).matches();	}	/**	 * 是否为合法IP地址	 * 	 * @param ip	 * @return	 */	public static boolean isIP(String ip) {		Pattern pattern = Pattern.compile("^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$");		return pattern.matcher(ip).matches();	}	/**	 * 是否为合法MAC地址，验证十六进制格式	 * 	 * @param mac	 * @return	 */	public static boolean isMac(String mac) {		Pattern pattern = Pattern.compile("^([0-9a-fA-F]{2})(([\\s:-][0-9a-fA-F]{2}){5})$");		return pattern.matcher(mac).matches();	}	public static boolean isNumeric(String str) {		if (null == str || str.equals("") || str.equals("null")) {			return false;		}		if (isInt(str))			return true;		Pattern pattern = Pattern.compile("^[0-9]{1,}\\.[0-9]{1,}$");		Matcher isNum = pattern.matcher(str);		if (!isNum.matches()) {			return false;		}		return true;	}	public static boolean isNumericOrNull(String str) {		if (null == str || str.equals("") || str.equals("null")) {			return true;		}		if (isInt(str))			return true;		Pattern pattern = Pattern.compile("^[0-9]{1,}\\.[0-9]{1,}$");		Matcher isNum = pattern.matcher(str);		if (!isNum.matches()) {			return false;		}		return true;	}	public static boolean isInt(String str) {		Pattern pattern = Pattern.compile("[0-9]*");		Matcher isNum = pattern.matcher(str);		if (!isNum.matches()) {			return false;		}		return true;	}	/**	 * 	 * @param d	 * @return	 */	public static boolean checkDouble(Double d) {		if (null == d || d.compareTo(new Double(0)) <= 0) {			return false;		}		return true;	}	public static String[] spiltStr(String fieldsru, String tag) {		char dot = tag.charAt(0);		String field;		field = fieldsru + dot;		int num = 0;		int field_len = field.length();		for (int i = 0; i < field_len; i++) {			if (field.charAt(i) == dot) {				num++;			}		}		String[] returnarray = new String[num];		int begin = 0;		int end;		for (int j = 0; j < num; j++) {			end = field.indexOf(dot, begin);			returnarray[j] = field.substring(begin, end);			begin = end + 1;		}		return returnarray;	}	public static String toUtf8String(String s) {		StringBuffer sb = new StringBuffer();		for (int i = 0; i < s.length(); i++) {			char c = s.charAt(i);			if (c >= 0 && c <= 255) {				sb.append(c);			} else {				byte[] b;				try {					b = Character.toString(c).getBytes("utf-8");				} catch (Exception ex) {					System.out.println(ex);					b = new byte[0];				}				for (int j = 0; j < b.length; j++) {					int k = b[j];					if (k < 0)						k += 256;					sb.append("%" + Integer.toHexString(k).toUpperCase());				}			}		}		return sb.toString();	}	/**	 * 如果为空null的字符串,返回 "",否则返回trim();	 * 为了匹配某些设置参数 null的参数被  spiltStr 解析为[null]	 * @param str	 * @return	 */	public static String getStringFromEmpty(String str) {		if(null != str){			return str.trim();		}else{			return "";		}	}		/**	 * 根据字符串或者数字，	 * @param str 必须为数字类型	 * @param def 为空 “” 使用默认	 * @return	 */	public static int getIntFromEmpty(String str,int def) {		if(null != str && !"".equals(str.trim())){			return Integer.valueOf(str.trim());		}else{			return def;		}	}		/**	 * 根据字符串或者数字，	 * @param str 必须为数字类型	 * @param def 为空 “” 使用默认	 * @return	 */	public static float getFloatFromEmpty(String str,float def) {		if(null != str && !"".equals(str.trim())){			return Float.valueOf(str.trim());		}else{			return def;		}	}		/**	 * 根据字符串或者数字，	 * @param str 必须为数字类型	 * @param def 为空 “” 使用默认	 * @return	 */	public static double getDoubleFromEmpty(String str,double def) {		if(null != str && !"".equals(str.trim())){			return Double.valueOf(str.trim());		}else{			return def;		}	}		/**	 * 传入一个字符，判断字符串最后是否 是该字符，然后截取	 * @param str     sss,2,	 * @param cutStr  ,	 * @return        sss,2	 */	public static String getCutLastChar(String str,String cutStr){		if(null == str || "".equals(str.trim())){			return "";		}else{			str = str.trim();			if(str.endsWith(cutStr)){				return str.substring(0, str.length() - 1);			}else{				return str;			}		}	}		/**	 * 	 * 判断输入的字符串是否是null或"",不使用trim	 * @param str	 * @return	 */	public static boolean isEmptyOrNullNotTrim(String str) {		if (str == null || "".equals(str))			return true;		return false;	}		/**	 * 	 * 判断输入的字符串是否是null或"",使用trim	 * @param str	 * @return	 */	public static boolean isEmptyOrNullByTrim(String str) {		if (str == null || "".equals(str.trim()))			return true;		return false;	}		/**	 * 格式化指定的秒数为“hh:mm:ss”格式	 * @param sec 秒	 * @return	 */	public static String changeSecToHhMmSs(String sec) {		String relt = sec;		if (null != sec && !"".equals(sec.trim()) && !"0".equals(sec.trim())) {			try {				long totalSS = Long.parseLong(sec.trim());				long hh = totalSS / (60 * 60);				long mm = (totalSS - (hh * 60 * 60)) / 60;				long ss = (totalSS - (hh * 60 * 60) - mm * 60);				relt = hh + ":" + mm + ":" + ss;			} catch (Exception e) {				relt = sec;			}		}		return relt;	}}